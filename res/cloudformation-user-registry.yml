AWSTemplateFormatVersion: "2010-09-09"

Resources:
  # Sub-stack for the custom resources
  CustomResource:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub: https://s3.amazonaws.com/${DeploymentManagementS3Bucket}/cloudformation-custom-resource.yml

  # Policy that allows custom resource Lambda function to alter AWS service resources
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SES
      Roles:
        - Fn::GetAtt: CustomResource.Outputs.Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              # Add all the actions required for any used custom resources
              # The full reference is available here:
              # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actionsconditions.html
              - cognito-idp:CreateUserPool
              - cognito-idp:DeleteUserPool
              - cognito-idp:UpdateUserPool
              - cognito-idp:DescribeUserPool
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
              - cognito-idp:DescribeUserPoolDomain
              - cognito-idp:UpdateUserPoolClient
              - cognito-idp:DescribeUserPoolClient
              - cognito-idp:CreateIdentityProvider
              - cognito-idp:UpdateIdentityProvider
              - cognito-idp:DeleteIdentityProvider

  # The user pool for the registry
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: AWS::StackName
      UsernameAttributes:
      - email

  # We need to perform a separate update to the UserPool, so that we can
  # add the 'PreTokenGeneration' property to 'LambdaConfig', which
  # the normal UserPool does not support
  UserPoolLambdaConfig:
    Type: Custom::CognitoUserPool
    DependsOn:
    - CustomResourcePolicy
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResource.Outputs.ServiceToken
      Service: CognitoIdentityServiceProvider
      Parameters:
        UserPoolId:
          Ref: UserPool
        LambdaConfig:
          PreTokenGeneration:
            Fn::GetAtt: UserPoolPreTokenGenerationLambdaFunction.Arn
      Create:
        Action: updateUserPool
      Update:
        Action: updateUserPool

  # Group for administrator users
  AdminUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Administrators of the application
      GroupName: Administrators
      Precedence: 10
      UserPoolId:
        Ref: UserPool

  # The domain for the user pool in the AWS Cognito
  UserPoolDomain:
    Type: Custom::CognitoUserPoolDomain
    DependsOn:
    - CustomResourcePolicy
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResource.Outputs.ServiceToken
      Service: CognitoIdentityServiceProvider
      PhysicalResourceId:
        # User pool domains are physically identified by the domain name
        Ref: AWS::StackName
      Parameters:
        UserPoolId:
          Ref: UserPool
        Domain:
          Ref: AWS::StackName
      Create:
        Action: createUserPoolDomain
      Delete:
        Action: deleteUserPoolDomain
        IgnoreErrors: true

  # The client for the user pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-client
      GenerateSecret: true
      UserPoolId:
        Ref: UserPool

  # Settings for the user pool client that cannot be set natively in CloudFormation
  UserPoolClientSettings:
    Type: Custom::CognitoUserPoolClientSettings
    DependsOn:
    - CustomResourcePolicy
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResource.Outputs.ServiceToken
      Service: CognitoIdentityServiceProvider
      Create:
        Action: updateUserPoolClient
        Parameters:
          UserPoolId:
            Ref: UserPool
          ClientId:
            Ref: UserPoolClient
          AllowedOAuthFlows:
            - code
            - implicit
          AllowedOAuthScopes:
            - openid
          AllowedOAuthFlowsUserPoolClient: true
          CallbackURLs:
            - Fn::Sub: ${AssetsRoot}/_oauth2_signin_complete.html
          LogoutURLs:
            - Fn::Sub: ${AssetsRoot}/_oauth2_signout_complete.html

  # The client secret is not available natively via CloudFormation
  # We retrieve it with the custom resource
  UserPoolClientSecret:
    Type: Custom::CognitoClientSecret
    DependsOn:
    - CustomResourcePolicy
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResource.Outputs.ServiceToken
      Service: CognitoIdentityServiceProvider
      Create:
        Action: describeUserPoolClient
        Attributes: UserPoolClient
        Parameters:
          UserPoolId:
            Ref: UserPool
          ClientId:
            Ref: UserPoolClient

  # Authorizer for our API to allow authentication with the user pools
  ApiGatewayUserPoolAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Type: COGNITO_USER_POOLS
      Name: UserPoolAuthorizer
      IdentitySource: method.request.header.Authorization
      IdentityValidationExpression:
        Fn::Sub: "^${UserPoolClientSecret.ClientId}$"
      RestApiId:
        Ref: ApiGatewayRestApi
      ProviderARNs:
        - Fn::GetAtt: UserPool.Arn

  # Make the user pool ARN available for Lambda functions as a stage variable
  ApiGatewayStage:
    Properties:
      Variables:
        DatabaseTableUsersURI:
          Fn::GetAtt: UserPool.Arn

  # Make the user pool client information available for server-side rendering Lambda function
  # as API Gateway stage variables
  SiteGatewayStage:
    Properties:
      Variables:
        AuthSignInUri:
          Fn::Sub: "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com/oauth2/authorize"
        AuthSignOutUri:
          Fn::Sub: "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com/logout"
        AuthSignInRedirectUri:
          Fn::Sub: "${AssetsRoot}/_oauth2_signin_complete.html"
        AuthSignOutRedirectUri:
          Fn::Sub: "${AssetsRoot}/_oauth2_signout_complete.html"
        AuthClientId:
          Ref: UserPoolClient

  # A lambda function that adds the 'picture' claim to the ID tokens on authentication
  UserPoolPreTokenGenerationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt: LambdaExecutionIamRole.Arn
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            let picture = event.request.userAttributes.picture;
            try {
                picture = JSON.parse(picture).data.url;
            } catch (err) {}
            if (typeof picture !== 'string' || !/^https?:\/\//.test(picture)) {
                picture = null;
            }
            event.response = {
              "claimsOverrideDetails": {
                "claimsToAddOrOverride": {
                  "picture": picture,
                }
              }
            };
            callback(null, event);
          };
      Runtime: nodejs8.10
      Timeout: 3

  # Grant the permission for the AWS Cognito to execute the Lambda trigger function
  UserPoolPreTokenGenerationLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: UserPoolPreTokenGenerationLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt: UserPool.Arn

Outputs:
  UserPoolRoot:
    Description: "Root URL for the AWS Cognito user pool"
    Value:
      Fn::Sub: "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com"
  UserPoolClientId:
    Description: "ID of the user pool client"
    Value:
      Ref: UserPoolClient
  UserPoolClientSecret:
    Description: "Generated secret for the user pool client"
    Value:
      Fn::GetAtt: UserPoolClientSecret.ClientSecret
  DatabaseTableUsersURI:
    Value:
      Fn::GetAtt: UserPool.Arn
