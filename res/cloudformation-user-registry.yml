AWSTemplateFormatVersion: "2010-09-09"

Resources:
  # Extend custom resource to allow performing user-related operations
  CustomResourcePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              # The full reference is available here:
              # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actionsconditions.html
              - cognito-idp:CreateUserPool
              - cognito-idp:DeleteUserPool
              - cognito-idp:UpdateUserPool
              - cognito-idp:DescribeUserPool
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
              - cognito-idp:DescribeUserPoolDomain
              - cognito-idp:UpdateUserPoolClient
              - cognito-idp:DescribeUserPoolClient
              - cognito-idp:CreateIdentityProvider
              - cognito-idp:UpdateIdentityProvider
              - cognito-idp:DeleteIdentityProvider
              - kms:GenerateRandom

  # The user pool for the registry
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: AWS::StackName
      UsernameAttributes:
      - email

  # We need to perform a separate update to the UserPool, so that we can
  # add the trigger functions to 'LambdaConfig', which
  # the normal UserPool does not support
  UserPoolLambdaConfig:
    Type: Custom::CognitoUserPool
    DependsOn:
    - CustomResourcePolicy
    - CustomResourceLogGroup
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResourceLambdaFunction.Arn
      Service: CognitoIdentityServiceProvider
      Parameters:
        UserPoolId:
          Ref: UserPool
        LambdaConfig:
          PreTokenGeneration:
            Fn::GetAtt: UserPoolPreTokenGenerationLambdaFunction.Arn
          PreSignUp:
            Fn::GetAtt: UserPoolPreSignUpLambdaFunction.Arn
      Create:
        Action: updateUserPool
      Update:
        Action: updateUserPool

  # Group for administrator users
  AdminUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Administrators of the application
      GroupName: Administrators
      Precedence: 10
      UserPoolId:
        Ref: UserPool

  # The domain for the user pool in the AWS Cognito
  UserPoolDomain:
    Type: Custom::CognitoUserPoolDomain
    DependsOn:
    - CustomResourcePolicy
    - CustomResourceLogGroup
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResourceLambdaFunction.Arn
      Service: CognitoIdentityServiceProvider
      PhysicalResourceId:
        # User pool domains are physically identified by the domain name
        Ref: AWS::StackName
      Parameters:
        UserPoolId:
          Ref: UserPool
        Domain:
          Ref: AWS::StackName
      Create:
        Action: createUserPoolDomain
      Delete:
        Action: deleteUserPoolDomain
        IgnoreErrors: true

  # The client for the user pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-client
      GenerateSecret: true
      UserPoolId:
        Ref: UserPool

  # Settings for the user pool client that cannot be set natively in CloudFormation
  UserPoolClientSettings:
    Type: Custom::CognitoUserPoolClientSettings
    DependsOn:
    - CustomResourcePolicy
    - CustomResourceLogGroup
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResourceLambdaFunction.Arn
      Service: CognitoIdentityServiceProvider
      Create:
        Action: updateUserPoolClient
        Parameters:
          UserPoolId:
            Ref: UserPool
          ClientId:
            Ref: UserPoolClient
          AllowedOAuthFlows:
            - code
          AllowedOAuthScopes:
            - openid
          AllowedOAuthFlowsUserPoolClient: true
          CallbackURLs:
            - Fn::Sub: ${ServerRoot}/oauth2/signed_in
          LogoutURLs:
            - Fn::Sub: ${ServerRoot}/oauth2/signed_out

  # The client secret is not available natively via CloudFormation
  # We retrieve it with the custom resource
  UserPoolClientSecret:
    Type: Custom::CognitoClientSecret
    DependsOn:
    - CustomResourcePolicy
    - CustomResourceLogGroup
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResourceLambdaFunction.Arn
      Service: CognitoIdentityServiceProvider
      Create:
        Action: describeUserPoolClient
        Attributes: UserPoolClient
        Parameters:
          UserPoolId:
            Ref: UserPool
          ClientId:
            Ref: UserPoolClient

  # Generate random bytes for the user session AES encryption key
  # The generated value is available as base64 encoded string with
  # Fn::GetAtt: UserSessionEncryptionKey.Plaintext
  UserSessionEncryptionKey:
    Type: Custom::KMSRandomBytes
    DependsOn:
    - CustomResourcePolicy
    - CustomResourceLogGroup
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResourceLambdaFunction.Arn
      Service: KMS
      Create:
        Action: generateRandom
        Parameters:
          NumberOfBytes: 32  # = 256 bits

  # Generate a secret for encrypting user session cookies
  UserSessionEncryptionKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: "${AWS::StackName}/sessions/encryption-key"
      Description:
        Fn::Sub: "User session symmetric AES encryption key for ${AWS::StackName} CloudFormation stack"
      SecretString:
        Fn::Join:
          - ''
          - - '{"kty": "oct", "alg": "A256GCM", "k": "'
            # Convert the base64 encoded binary to base64url encoding
            # Remove the padding ('=')
            - Fn::Select:
              - 0
              - Fn::Split:
                - '='
                # Replace '+' with '-'
                - Fn::Join:
                  - '-'
                  - Fn::Split:
                    - '+'
                    # Replace '/' with '_'
                    - Fn::Join:
                      - '_'
                      - Fn::Split:
                        - '/'
                        - Fn::GetAtt: UserSessionEncryptionKey.Plaintext
            - '"}'

  # Authorizer for our API to allow authentication with the user pools
  ApiGatewayUserPoolAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Type: COGNITO_USER_POOLS
      Name: UserPoolAuthorizer
      IdentitySource: method.request.header.Authorization
      IdentityValidationExpression:
        Fn::Sub: "^${UserPoolClientSecret.ClientId}$"
      RestApiId:
        Ref: ServerApiGatewayRestApi
      ProviderARNs:
        - Fn::GetAtt: UserPool.Arn

  # Make authentication and user configuration information available for the server-side
  # Lambda function as environment variables
  ServerLambdaFunction:
    Properties:
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
          USER_SESSION_ENCRYPTION_KEY_SECRET_ARN:
            Ref: UserSessionEncryptionKeySecret
          AUTH_CLIENT_ID:
            Ref: UserPoolClient
          AUTH_CLIENT_SECRET:
            Fn::GetAtt: UserPoolClientSecret.ClientSecret
          AUTH_SIGN_IN_URI:
            Fn::Sub: "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com/oauth2/authorize"
          AUTH_SIGN_OUT_URI:
            Fn::Sub: "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com/logout"
          AUTH_TOKEN_URI:
            Fn::Sub: "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com/oauth2/token"

  # A lambda function that adds the 'picture' claim to the ID tokens on authentication
  UserPoolPreTokenGenerationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName:
        Fn::Sub: "${AWS::StackName}-user-pre-token-generation"
      Role:
        Fn::GetAtt: LambdaExecutionIamRole.Arn
      Code:
        ZipFile: !Include "./lambda-user-pre-token-generation.js"
      Runtime: nodejs12.x
      Timeout: 3

  # Grant the permission for the AWS Cognito to execute the Lambda trigger function
  UserPoolPreTokenGenerationLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: UserPoolPreTokenGenerationLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt: UserPool.Arn

  # A lambda function that links a newly signed up user to any existing user with the same email
  UserPoolPreSignUpLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName:
        Fn::Sub: "${AWS::StackName}-user-pre-signup"
      Role:
        Fn::GetAtt: LambdaExecutionIamRole.Arn
      Code:
        ZipFile: !Include "./lambda-user-pre-signup.js"
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool

  # Grant the permission for the AWS Cognito to execute the Lambda trigger function
  UserPoolPreSignupLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: UserPoolPreSignUpLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt: UserPool.Arn

  # CloudWatch log group for pre-signup Lambda trigger function
  UserPoolPreSignUpLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName:
        Fn::Sub: "/aws/lambda/${AWS::StackName}-user-pre-signup"

  # Extend LambdaExecutionIamRolePolicy to allow operating on user pools
  LambdaExecutionIamRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
        # Allow access to the user pool
        - Effect: Allow
          Action:
          - cognito-idp:AdminDeleteUser
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminLinkProviderForUser
          - cognito-idp:AdminUpdateUserAttributes
          - cognito-idp:DeleteUser
          - cognito-idp:GetUser
          - cognito-idp:ListUsers
          - cognito-idp:UpdateUserAttributes
          Resource:
          - Fn::GetAtt: UserPool.Arn
        # Allow access to the user session key secret
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
          - Ref: UserSessionEncryptionKeySecret

Outputs:
  UserPoolRoot:
    Description: "Root URL for the AWS Cognito user pool"
    Value:
      Fn::Sub: "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com"
  UserPoolClientId:
    Description: "ID of the user pool client"
    Value:
      Ref: UserPoolClient
  UserPoolClientSecret:
    Description: "Generated secret for the user pool client"
    Value:
      Fn::GetAtt: UserPoolClientSecret.ClientSecret
  DatabaseTableUsersURI:
    Value:
      Fn::GetAtt: UserPool.Arn
  UserSessionEncryptionKeySecretArn:
    Description: ARN of the Secrets Manager user session encryption key
    Value:
      Ref: UserSessionEncryptionKeySecret
