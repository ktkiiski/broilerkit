AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  # Name of the VPC stack
  VpcStackName:
    Type: String
  # Name of the database
  DatabaseName:
    Type: String
  # Master username for the database
  DatabaseUsername:
    Type: String
    Default: master
  # S3 key for the deployment ZIP package for table migration Lambda function
  DatabaseTableMigrationDeploymentPackageS3Key:
    Type: String

Resources:
  # Lambda function acting as a custom database table resource
  DatabaseMigrationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: migration.handler
      Role:
        Fn::GetAtt: DatabaseMigrationLambdaFunctionRole.Arn
      Code:
        S3Bucket:
          Ref: DeploymentManagementS3Bucket
        S3Key:
          Ref: DatabaseTableMigrationDeploymentPackageS3Key
      FunctionName:
        Fn::Sub: "${AWS::StackName}-db-table-migration"
      Runtime: nodejs10.x
      Timeout: 900  # = 15 minutes
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VpcStackName}-security-group"
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VpcStackName}-private-subnet-a"
          - Fn::ImportValue:
              Fn::Sub: "${VpcStackName}-private-subnet-b"

  # Log group for the database migration operations
  DatabaseMigrationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: "/aws/lambda/${DatabaseMigrationLambdaFunction}"

  # Policy allowing Lambda function migrations and access the database credentials
  DatabaseMigrationLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
      - PolicyName: DatabaseMigrationLambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actionsconditions.html
            - Effect: Allow
              Resource:
                - Ref: DatabaseMasterSecret
              Action:
                - secretsmanager:GetSecretValue
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:FilterLogEvents
              Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Assign the server Lambda function to VPC and make database information
  # available as environment variables
  ServerLambdaFunction:
    Properties:
      Environment:
        Variables:
          DATABASE_HOST:
            Fn::GetAtt: DatabaseDBCluster.Endpoint.Address
          DATABASE_PORT:
            Fn::GetAtt: DatabaseDBCluster.Endpoint.Port
          DATABASE_NAME:
            Ref: DatabaseName
          DATABASE_CREDENTIALS_ARN:
            Ref: DatabaseMasterSecret
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VpcStackName}-security-group"
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VpcStackName}-private-subnet-a"
          - Fn::ImportValue:
              Fn::Sub: "${VpcStackName}-private-subnet-b"

  # Allow Lambda function to work on VPC
  LambdaExecutionIamRole:
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Allow Lambda function to access the database credentials
  LambdaExecutionIamRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
        # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actionsconditions.html
        - Effect: Allow
          Resource:
            - Ref: DatabaseMasterSecret
          Action:
            - secretsmanager:GetSecretValue

  # Aurora Serverless Database Cluster
  DatabaseDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: 10.7
      DatabaseName:
        Ref: DatabaseName
      MasterUsername:
        Fn::Sub: "{{resolve:secretsmanager:${DatabaseMasterSecret}:SecretString:username}}"
      MasterUserPassword:
        Fn::Sub: "{{resolve:secretsmanager:${DatabaseMasterSecret}:SecretString:password}}"
      BackupRetentionPeriod: 35
      ScalingConfiguration:
        AutoPause: true
        SecondsUntilAutoPause: 1800 # 30 min
        # TODO: MinCapacity & MaxCapacity
      DBClusterParameterGroupName:
        Ref: DatabaseDBClusterParameterGroup
      DBSubnetGroupName:
        Ref: DatabaseDBSubnetGroup
      VpcSecurityGroupIds:
        - Fn::ImportValue:
            Fn::Sub: "${VpcStackName}-security-group"

  # Database subnet group
  DatabaseDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:
        Fn::Sub: Aurora Serverless database subnet group in VPC for ${AWS::StackName} CloudFormation stack
      DBSubnetGroupName:
        Fn::Sub: "${AWS::StackName}"
      SubnetIds:
        - Fn::ImportValue:
            Fn::Sub: "${VpcStackName}-private-subnet-a"
        - Fn::ImportValue:
            Fn::Sub: "${VpcStackName}-private-subnet-b"

  # Extend custom resource to allow performing database-related operations
  CustomResourcePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              # The full reference is available here:
              # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actionsconditions.html
              - rds:DescribeDBClusters
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
          - Effect: Allow
            Resource:
              Fn::Sub: "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DatabaseDBCluster}"
            Action:
              - rds:ModifyDBCluster

  # Enable the HTTP endpoint ("Data API") for the DB cluster
  DatabaseDBClusterHttpEndpoint:
    Type: Custom::DBClusterHttpEndpoint
    DependsOn:
    - CustomResourcePolicy
    - CustomResourceLogGroup
    - DatabaseDBCluster
    Properties:
      ServiceToken:
        Fn::GetAtt: CustomResourceLambdaFunction.Arn
      Service: RDS
      Create:
        # https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/RDS.html#modifyDBCluster-property
        Action: modifyDBCluster
        Parameters:
          DBClusterIdentifier:
            Ref: DatabaseDBCluster
          EnableHttpEndpoint: true
          ApplyImmediately: true
      Delete:
        # https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/RDS.html#modifyDBCluster-property
        Action: modifyDBCluster
        Parameters:
          DBClusterIdentifier:
            Ref: DatabaseDBCluster
          EnableHttpEndpoint: false
          ApplyImmediately: true

  # Parameter group for the database
  DatabaseDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description:
        Fn::Sub: "Aurora PG Cluster Parameter Group for ${AWS::StackName} CloudFormation stack"
      Family: aurora-postgresql10
      Parameters:
        rds.force_ssl: 1

  # Generate a password for the database
  DatabaseMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: "${AWS::StackName}/database/credentials"
      Description:
        Fn::Sub: "Aurora PostgreSQL database master user secret for ${AWS::StackName} CloudFormation stack"
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub: '{"username": "${DatabaseUsername}"}'
        GenerateStringKey: "password"
        ExcludeCharacters: '"@/\'
        PasswordLength: 16

  # Extend LambdaExecutionIamRolePolicy to allow accessing the database secret
  LambdaExecutionIamRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
        # Allow access to the database credentials for connecting the database
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
          - Ref: DatabaseMasterSecret

Outputs:
  DatabaseDBClusterEndpointAddress:
    Description: Endpoint host address of the Aurora Serverless DB cluster
    Value:
      Fn::GetAtt: DatabaseDBCluster.Endpoint.Address
  DatabaseDBClusterEndpointPort:
    Description: Endpoint port number of the Aurora Serverless DB cluster
    Value:
      Fn::GetAtt: DatabaseDBCluster.Endpoint.Port
  DatabaseDBClusterArn:
    Description: ARN of the Aurora Serverless DB cluster
    Value:
      Fn::Sub: "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DatabaseDBCluster}"
  DatabaseMasterSecretArn:
    Description: ARN of the Secrets Manager master credentials secret
    Value:
      Ref: DatabaseMasterSecret
