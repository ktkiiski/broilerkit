AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for the deployed application
Parameters:
  # Origin for the website HTML files
  SiteOrigin:
    Type: String
  # Domain for the website HTML files
  SiteDomainName:
    Type: String
  # Hosted zone name of the domain for the website HTML files
  SiteHostedZoneName:
    Type: String
  # Domain for the static asset files
  AssetsDomainName:
    Type: String
  # Hosted zone name of the domain for the static asset files
  AssetsHostedZoneName:
    Type: String
  # Whether or not to use CDN for assets
  AssetsUseCDN:
    Type: String
    AllowedValues:
      - "true"
      - "false"
  # Whether or not to use CDN for the website
  SiteUseCDN:
    Type: String
    AllowedValues:
      - "true"
      - "false"

Mappings:
  # All supported regions and their S3 hosted zone IDs and website endpoints
  RegionMap:
    us-east-2:
      websiteEndpoint: s3-website.us-east-2.amazonaws.com
      s3HostedZoneId: Z2O1EMRO9K5GLX
    us-east-1:
      websiteEndpoint: s3-website-us-east-1.amazonaws.com
      s3HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      websiteEndpoint: s3-website-us-west-1.amazonaws.com
      s3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      websiteEndpoint: s3-website-us-west-2.amazonaws.com
      s3HostedZoneId: Z3BJ6K6RIION7M
    ca-central-1:
      websiteEndpoint: s3-website.ca-central-1.amazonaws.com
      s3HostedZoneId: Z1QDHH18159H29
    ap-south-1:
      websiteEndpoint: s3-website.ap-south-1.amazonaws.com
      s3HostedZoneId: Z11RGJOFQNVJUP
    ap-northeast-2:
      websiteEndpoint: s3-website.ap-northeast-2.amazonaws.com
      s3HostedZoneId: Z3W03O7B5YMIYP
    ap-southeast-1:
      websiteEndpoint: s3-website-ap-southeast-1.amazonaws.com
      s3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      websiteEndpoint: s3-website-ap-southeast-2.amazonaws.com
      s3HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      websiteEndpoint: s3-website-ap-northeast-1.amazonaws.com
      s3HostedZoneId: Z2M4EHUR26P7ZW
    eu-central-1:
      websiteEndpoint: s3-website.eu-central-1.amazonaws.com
      s3HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      websiteEndpoint: s3-website-eu-west-1.amazonaws.com
      s3HostedZoneId: Z1BKCTXD74EZPE
    eu-west-2:
      websiteEndpoint: s3-website.eu-west-2.amazonaws.com
      s3HostedZoneId: Z3GKZC51ZF0DB4
    sa-east-1:
      websiteEndpoint: s3-website-sa-east-1.amazonaws.com
      s3HostedZoneId: Z7KQH4QJS55SO

Conditions:
  # Condition for whether or not to use CloudFront in front of the static assets S3 bucket
  AssetsUseCDN:
    Fn::Equals:
      - Ref: AssetsUseCDN
      - "true"
  # Condition for whether or not to use CloudFront in front of the website S3 bucket
  SiteUseCDN:
    Fn::Equals:
      - Ref: SiteUseCDN
      - "true"

Resources:
  # S3 bucket for storing the website HTML files
  SiteS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName:
        # NOTE: The bucket name must match the actual domain to get the custom domain to work
        Ref: SiteDomainName
      WebsiteConfiguration:
        IndexDocument: index.html
  # S3 bucket for storing the static asset files
  AssetsS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName:
        # NOTE: The bucket name must match the actual domain to get the custom domain to work
        Ref: AssetsDomainName
      WebsiteConfiguration:
        IndexDocument: index.html
  # Make website HTML files public for everyone
  SiteS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: SiteS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AddPerm
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource:
              Fn::Sub: "${SiteS3Bucket.Arn}/*"
  # Make static asset files public for everyone
  AssetsS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: AssetsS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AddPerm
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource:
              Fn::Sub: "${AssetsS3Bucket.Arn}/*"
  # CloudFront distribution for the static asset files cached forever
  AssetsCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: AssetsUseCDN
    Properties:
      DistributionConfig:
        Aliases:
          - Ref: AssetsDomainName
        Origins:
          - DomainName:
              # Pick the 3rd item by splitting the bucket website URL, that is, the domain part!
              Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - Fn::GetAtt: AssetsS3Bucket.WebsiteURL
            Id: AssetsS3BucketOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Comment:
          Fn::Sub: "${AWS::StackName} static assets CloudFront distribution (cookieless)"
        Enabled: true
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: AssetsS3BucketOrigin
          ViewerProtocolPolicy: "redirect-to-https"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: DomainCertificate
          SslSupportMethod: "sni-only"
  # CloudFront distribution for the website HTML files
  SiteCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: SiteUseCDN
    Properties:
      DistributionConfig:
        Aliases:
          - Ref: SiteDomainName
        Origins:
          - DomainName:
              # Pick the 3rd item by splitting the bucket website URL, that is, the domain part!
              Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - Fn::GetAtt: SiteS3Bucket.WebsiteURL
            Id: SiteS3BucketOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Comment:
          Fn::Sub: "${AWS::StackName} website CloudFront distribution"
        Enabled: true
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: SiteS3BucketOrigin
          ViewerProtocolPolicy: "redirect-to-https"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: DomainCertificate
          SslSupportMethod: "sni-only"
  # DNS domain name for the host of the static asset files
  AssetsDNS:
    Type: "AWS::Route53::RecordSetGroup"
    Condition: AssetsUseCDN
    Properties:
      HostedZoneName:
        Fn::Sub: "${AssetsHostedZoneName}."
      Comment: "Domain for the CloudFront distribution of the static asset files"
      RecordSets:
        - Name:
            Fn::Sub: "${AssetsDomainName}."
          Type: A
          AliasTarget:
            HostedZoneId:
              Fn::If:
                - AssetsUseCDN
                # If using CloudFront, then use the CloudFront hosted zone ID
                - Z2FDTNDATAQYW2
                # Otherwise use the S3 hosted zone ID based on the region
                - Fn::FindInMap: [ RegionMap, {Ref: 'AWS::Region'}, s3HostedZoneId]
            DNSName:
              Fn::If:
                - AssetsUseCDN
                # If using CloudFront, then use distribution's domain name
                - Fn::GetAtt: AssetsCloudFrontDistribution.DomainName
                # Otherwise use the S3 website domain
                - Fn::FindInMap: [ RegionMap, {Ref: 'AWS::Region'}, websiteEndpoint]
  # DNS domain name for the host of the website HTML files
  SiteDNS:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneName:
        Fn::Sub: "${SiteHostedZoneName}."
      Comment: "Domain for the CloudFront distribution of the HTML website files"
      RecordSets:
        - Name:
            Fn::Sub: "${SiteDomainName}."
          Type: A
          AliasTarget:
            HostedZoneId:
              Fn::If:
                - SiteUseCDN
                # If using CloudFront, then use the CloudFront hosted zone ID
                - Z2FDTNDATAQYW2
                # Otherwise use the S3 hosted zone ID based on the region
                - Fn::FindInMap: [ RegionMap, {Ref: 'AWS::Region'}, s3HostedZoneId]
            DNSName:
              Fn::If:
                - SiteUseCDN
                # If using CloudFront, then use distribution's domain name
                - Fn::GetAtt: SiteCloudFrontDistribution.DomainName
                # Otherwise use the S3 website domain
                - Fn::FindInMap: [ RegionMap, {Ref: 'AWS::Region'}, websiteEndpoint]
  # Certificate for the domains
  DomainCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName:
        Ref: SiteDomainName
      SubjectAlternativeNames:
        - Ref: AssetsDomainName
Outputs:
  SiteS3BucketName:
    Value:
      Ref: SiteS3Bucket
  AssetsS3BucketName:
    Value:
      Ref: AssetsS3Bucket
  SiteCloudFrontDistributionId:
    Value:
      Ref: SiteCloudFrontDistribution
    Condition: SiteUseCDN
  AssetsCloudFrontDistributionId:
    Value:
      Ref: AssetsCloudFrontDistribution
    Condition: AssetsUseCDN
