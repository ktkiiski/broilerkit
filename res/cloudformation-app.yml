AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for the deployed application
Parameters:
  # Root URL for the website
  ServerRoot:
    Type: String
  # Origin for the website
  ServerOrigin:
    Type: String
  # Domain for the website
  ServerDomainName:
    Type: String
  # Hosted zone name of the domain for the website
  ServerHostedZoneName:
    Type: String
  # The key of the ZIP file in the deployment S3 bucket
  ServerRequestLambdaFunctionS3Key:
    Type: String
  # Root URL for the static asset files
  AssetsRoot:
    Type: String
  # Domain for the static asset files
  AssetsDomainName:
    Type: String
  # Hosted zone name of the domain for the static asset files
  AssetsHostedZoneName:
    Type: String

Mappings:
  # Mapping of AWS region-specific information
  # Source: https://docs.aws.amazon.com/general/latest/gr/rande.html
  RegionMap:
    us-east-2:
      S3WebsiteEndpoint: s3-website.us-east-2.amazonaws.com
      S3HostedZoneId: Z2O1EMRO9K5GLX
    us-east-1:
      S3WebsiteEndpoint: s3-website-us-east-1.amazonaws.com
      S3HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      S3WebsiteEndpoint: s3-website-us-west-1.amazonaws.com
      S3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      S3WebsiteEndpoint: s3-website-us-west-2.amazonaws.com
      S3HostedZoneId: Z3BJ6K6RIION7M
    ca-central-1:
      S3WebsiteEndpoint: s3-website.ca-central-1.amazonaws.com
      S3HostedZoneId: Z1QDHH18159H29
    ap-south-1:
      S3WebsiteEndpoint: s3-website.ap-south-1.amazonaws.com
      S3HostedZoneId: Z11RGJOFQNVJUP
    ap-northeast-2:
      S3WebsiteEndpoint: s3-website.ap-northeast-2.amazonaws.com
      S3HostedZoneId: Z3W03O7B5YMIYP
    ap-northeast-3:
      S3WebsiteEndpoint: s3-website.ap-northeast-3.amazonaws.com
      S3HostedZoneId: Z2YQB5RD63NC85
    ap-southeast-1:
      S3WebsiteEndpoint: s3-website-ap-southeast-1.amazonaws.com
      S3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      S3WebsiteEndpoint: s3-website-ap-southeast-2.amazonaws.com
      S3HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      S3WebsiteEndpoint: s3-website-ap-northeast-1.amazonaws.com
      S3HostedZoneId: Z2M4EHUR26P7ZW
    eu-central-1:
      S3WebsiteEndpoint: s3-website.eu-central-1.amazonaws.com
      S3HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      S3WebsiteEndpoint: s3-website-eu-west-1.amazonaws.com
      S3HostedZoneId: Z1BKCTXD74EZPE
    eu-west-2:
      S3WebsiteEndpoint: s3-website.eu-west-2.amazonaws.com
      S3HostedZoneId: Z3GKZC51ZF0DB4
    eu-west-3:
      S3WebsiteEndpoint: s3-website.eu-west-3.amazonaws.com
      S3HostedZoneId: Z3R1K369G5AVDG
    sa-east-1:
      S3WebsiteEndpoint: s3-website-sa-east-1.amazonaws.com
      S3HostedZoneId: Z7KQH4QJS55SO

Conditions:
  # Condition whether the website domain starts with `www.`
  # indicating that the root domain should be redirected to that domain
  SiteIsWwwDomain:
    Fn::Equals:
      - "www"
      - Fn::Select:
        # Select the first item...
        - 0
        # ...from the dot-separated list of domain name items
        - Fn::Split:
          - "."
          - Ref: ServerDomainName

Resources:
  # S3 bucket for storing the static asset files
  AssetsS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName:
        Fn::Sub: "${AWS::StackName}-assets"
      WebsiteConfiguration:
        IndexDocument: index.html
      # Allow CORS access to the assets from the website origin.
      # This is required e.g. for the manifest.json file to work
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - Ref: ServerOrigin
            AllowedHeaders:
              - "*"
  # S3 bucket that is just used for simple redirection from the root
  # domain to the www domain.
  RedirectS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    # Only create if the website domain starts with `www.`
    Condition: SiteIsWwwDomain
    Properties:
      # Because we are using this bucket as a hosted website,
      # it's name must match the corresponding domain, in this
      # case the Apex domain
      BucketName:
        Ref: ServerHostedZoneName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName:
            Ref: ServerDomainName
          Protocol: https
  # Make static asset files public for everyone
  AssetsS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: AssetsS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AddPerm
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource:
              Fn::Sub: "${AssetsS3Bucket.Arn}/*"
  # CloudFront distribution for the static asset files cached forever
  AssetsCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        # Use a cheaper price class for now.
        # TODO: Make this configurable, as 'PriceClass_All' is better for production
        PriceClass: PriceClass_100
        Aliases:
          - Ref: AssetsDomainName
        Origins:
          - DomainName:
              Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - Fn::GetAtt: AssetsS3Bucket.WebsiteURL
            Id: AssetsS3BucketOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Comment:
          Fn::Sub: "${AWS::StackName} static assets CloudFront distribution (cookieless)"
        Enabled: true
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: AssetsS3BucketOrigin
          ViewerProtocolPolicy: "redirect-to-https"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: DomainCertificate
          SslSupportMethod: "sni-only"
  # DNS domain name for the host of the static asset files
  AssetsDNS:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneName:
        Fn::Sub: "${AssetsHostedZoneName}."
      Comment: "Domain for the CloudFront distribution of the static asset files"
      RecordSets:
        - Name:
            Fn::Sub: "${AssetsDomainName}."
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              Fn::GetAtt: AssetsCloudFrontDistribution.DomainName
  # DNS domain name for the S3 bucket that redirects from the APEX domain to the website
  # NOTE: This does not support HTTPS!
  RedirectDNS:
    Type: "AWS::Route53::RecordSet"
    # Only create if the website domain starts with `www.`
    Condition: SiteIsWwwDomain
    Properties:
      HostedZoneName:
        Fn::Sub: "${ServerHostedZoneName}."
      Comment: "Domain for the redirection website hosted as a S3 bucket"
      Type: A
      Name:
        Fn::Sub: "${ServerHostedZoneName}."
      AliasTarget:
        HostedZoneId:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - S3HostedZoneId
        DNSName:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - S3WebsiteEndpoint

  # Certificate for the domains
  DomainCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName:
        Ref: ServerDomainName
      DomainValidationOptions:
        # Send validation emails using the top-level domains
        - DomainName:
            Ref: ServerDomainName
          ValidationDomain:
            Ref: ServerHostedZoneName
        - DomainName:
            Ref: AssetsDomainName
          ValidationDomain:
            Ref: AssetsHostedZoneName
      SubjectAlternativeNames:
        - Ref: AssetsDomainName

  # Lambda function for handling HTTP requests
  ServerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: DeploymentManagementS3Bucket
        S3Key:
          Ref: ServerRequestLambdaFunctionS3Key
      FunctionName:
        Fn::Sub: "${AWS::StackName}-server"
      Handler: server.request
      MemorySize: 2048
      Role:
        Fn::GetAtt: LambdaExecutionIamRole.Arn
      Runtime: nodejs12.x
      Timeout: 900  # = 15 minutes
      Environment:
        Variables:
          STACK_NAME:
            Ref: AWS::StackName
    DependsOn:
    - ServerLambdaFunctionLogGroup
    - LambdaExecutionIamRole

  # Grant API Gateway REST API a permission to execute the Lambda function
  ServerLambdaFunctionPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: ServerLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerApiGatewayRestApi}/*/*"

  # CloudWatch log group for the lambda function
  ServerLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName:
        Fn::Sub: "/aws/lambda/${AWS::StackName}-server"

  # API Gateway resource matching all the URL paths
  ServerProxyApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt: ServerApiGatewayRestApi.RootResourceId
      PathPart: "{path+}"
      RestApiId:
        Ref: ServerApiGatewayRestApi

  # Enabled HTTP method for an API resource
  ServerProxyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Ref: ServerProxyApiGatewayResource
      RestApiId:
        Ref: ServerApiGatewayRestApi
      RequestParameters: {}
      AuthorizationType: NONE
      Integration:
        # NOTE: Lambda execution endpoint is always called with POST
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServerLambdaFunction.Arn}/invocations"
      MethodResponses: []

  # Enabled HTTP method for an API resource
  ServerRootApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Fn::GetAtt: ServerApiGatewayRestApi.RootResourceId
      RestApiId:
        Ref: ServerApiGatewayRestApi
      RequestParameters: {}
      AuthorizationType: NONE
      Integration:
        # NOTE: Lambda execution endpoint is always called with POST
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServerLambdaFunction.Arn}/invocations"
      MethodResponses: []

  # The role that is used by the Lambda function execution
  LambdaExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      RoleName:
        Fn::Sub: "${AWS::StackName}-${AWS::Region}-lambdaRole"

  # The inline policy attached to the Lambda function execution role
  LambdaExecutionIamRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - Ref: LambdaExecutionIamRole
      PolicyName:
        Fn::Sub: ${AWS::Region}-lambda
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*
        - Effect: Allow
          Action:
          - logs:PutLogEvents
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*:*
        # Allow access to any SimpleDB domains related to this stack
        # NOTE: We assume that auto-generated domain names start with the stack name
        - Effect: Allow
          Action:
          - sdb:BatchDeleteAttributes
          - sdb:BatchPutAttributes
          - sdb:DeleteAttributes
          - sdb:DomainMetadata
          - sdb:GetAttributes
          - sdb:PutAttributes
          - sdb:Select
          Resource:
          - Fn::Sub: arn:aws:sdb:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}-*

  # Role for the API gateway for enabling CloudWatch logging
  ApiGatewayCloudWatchLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"

  # Accout for the API Gateway for enabling CloudWatch logging
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt: ["ApiGatewayCloudWatchLoggingRole", "Arn" ]
    DependsOn:
    - ApiGatewayCloudWatchLoggingRole

  # API gateway for server-side rendering
  ServerApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: "${AWS::StackName}-server"
      # Enable GZIP compression of the responses
      MinimumCompressionSize: 128

  # Deployment of the API gateway
  ServerApiGatewayDeployment<ServerDeploymentId>:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ServerApiGatewayRestApi
    DependsOn:
    - ServerProxyApiGatewayMethod
    - ServerRootApiGatewayMethod

  # Stage for the API gateway
  ServerApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ServerApiGatewayDeployment<ServerDeploymentId>
      Variables:
        # Make the website root URL available as a stage variable
        ServerRoot:
          Ref: ServerRoot
        # Make the website origin available as a stage variable
        ServerOrigin:
          Ref: ServerOrigin
        # Make the AWS region available as a stage variable
        Region:
          Ref: AWS::Region
      MethodSettings:
      # Enables CloudWatch logging for the site rendering requests
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: ServerApiGatewayRestApi
      StageName: server

  # Custom domain name for the website
  ServerApiGatewayRestApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn:
        Ref: DomainCertificate
      DomainName:
        Ref: ServerDomainName

  # Removes the '/server' part from the URL path
  ServerApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ''
      DomainName:
        Ref: ServerApiGatewayRestApiDomainName
      RestApiId:
        Ref: ServerApiGatewayRestApi
      Stage:
        Ref: ServerApiGatewayStage

  # DNS domain name for the website
  ServerDNS:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneName:
        Fn::Sub: "${ServerHostedZoneName}."
      Comment: "Domain for the server-side rendering API Gateway deployment"
      RecordSets:
        - Name:
            Fn::Sub: "${ServerDomainName}."
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              Fn::GetAtt: ServerApiGatewayRestApiDomainName.DistributionDomainName

Outputs:
  AssetsS3BucketName:
    Value:
      Ref: AssetsS3Bucket
  AssetsCloudFrontDistributionId:
    Value:
      Ref: AssetsCloudFrontDistribution
  ServerLambdaFunctionLogGroupName:
    Description: "Log group name of the HTTP server Lambda function logs"
    Value:
      Ref: ServerLambdaFunctionLogGroup
