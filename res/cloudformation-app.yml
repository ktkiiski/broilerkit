AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for the deployed application
Parameters:
  # Root URL for the website
  SiteRoot:
    Type: String
  # Origin for the website
  SiteOrigin:
    Type: String
  # Domain for the website
  SiteDomainName:
    Type: String
  # Hosted zone name of the domain for the website
  SiteHostedZoneName:
    Type: String
  # The key of the ZIP file in the deployment S3 bucket
  SiteRequestLambdaFunctionS3Key:
    Type: String
  # Root URL for the static asset files
  AssetsRoot:
    Type: String
  # Domain for the static asset files
  AssetsDomainName:
    Type: String
  # Hosted zone name of the domain for the static asset files
  AssetsHostedZoneName:
    Type: String

Mappings:
  # Mapping of AWS region-specific information
  # Source: https://docs.aws.amazon.com/general/latest/gr/rande.html
  RegionMap:
    us-east-2:
      S3WebsiteEndpoint: s3-website.us-east-2.amazonaws.com
      S3HostedZoneId: Z2O1EMRO9K5GLX
    us-east-1:
      S3WebsiteEndpoint: s3-website-us-east-1.amazonaws.com
      S3HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      S3WebsiteEndpoint: s3-website-us-west-1.amazonaws.com
      S3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      S3WebsiteEndpoint: s3-website-us-west-2.amazonaws.com
      S3HostedZoneId: Z3BJ6K6RIION7M
    ca-central-1:
      S3WebsiteEndpoint: s3-website.ca-central-1.amazonaws.com
      S3HostedZoneId: Z1QDHH18159H29
    ap-south-1:
      S3WebsiteEndpoint: s3-website.ap-south-1.amazonaws.com
      S3HostedZoneId: Z11RGJOFQNVJUP
    ap-northeast-2:
      S3WebsiteEndpoint: s3-website.ap-northeast-2.amazonaws.com
      S3HostedZoneId: Z3W03O7B5YMIYP
    ap-northeast-3:
      S3WebsiteEndpoint: s3-website.ap-northeast-3.amazonaws.com
      S3HostedZoneId: Z2YQB5RD63NC85
    ap-southeast-1:
      S3WebsiteEndpoint: s3-website-ap-southeast-1.amazonaws.com
      S3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      S3WebsiteEndpoint: s3-website-ap-southeast-2.amazonaws.com
      S3HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      S3WebsiteEndpoint: s3-website-ap-northeast-1.amazonaws.com
      S3HostedZoneId: Z2M4EHUR26P7ZW
    eu-central-1:
      S3WebsiteEndpoint: s3-website.eu-central-1.amazonaws.com
      S3HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      S3WebsiteEndpoint: s3-website-eu-west-1.amazonaws.com
      S3HostedZoneId: Z1BKCTXD74EZPE
    eu-west-2:
      S3WebsiteEndpoint: s3-website.eu-west-2.amazonaws.com
      S3HostedZoneId: Z3GKZC51ZF0DB4
    eu-west-3:
      S3WebsiteEndpoint: s3-website.eu-west-3.amazonaws.com
      S3HostedZoneId: Z3R1K369G5AVDG
    sa-east-1:
      S3WebsiteEndpoint: s3-website-sa-east-1.amazonaws.com
      S3HostedZoneId: Z7KQH4QJS55SO

Conditions:
  # Condition whether the website domain starts with `www.`
  # indicating that the root domain should be redirected to that domain
  SiteIsWwwDomain:
    Fn::Equals:
      - "www"
      - Fn::Select:
        # Select the first item...
        - 0
        # ...from the dot-separated list of domain name items
        - Fn::Split:
          - "."
          - Ref: SiteDomainName

Resources:
  # S3 bucket for storing the static asset files
  AssetsS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName:
        Fn::Sub: "${AWS::StackName}-assets"
      WebsiteConfiguration:
        IndexDocument: index.html
  # S3 bucket that is just used for simple redirection from the root
  # domain to the www domain.
  RedirectS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    # Only create if the website domain starts with `www.`
    Condition: SiteIsWwwDomain
    Properties:
      # Because we are using this bucket as a hosted website,
      # it's name must match the corresponding domain, in this
      # case the Apex domain
      BucketName:
        Ref: SiteHostedZoneName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName:
            Ref: SiteDomainName
          Protocol: https
  # Make static asset files public for everyone
  AssetsS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: AssetsS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AddPerm
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource:
              Fn::Sub: "${AssetsS3Bucket.Arn}/*"
  # CloudFront distribution for the static asset files cached forever
  AssetsCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        # Use a cheaper price class for now.
        # TODO: Make this configurable, as 'PriceClass_All' is better for production
        PriceClass: PriceClass_100
        Aliases:
          - Ref: AssetsDomainName
        Origins:
          - DomainName:
              Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - Fn::GetAtt: AssetsS3Bucket.WebsiteURL
            Id: AssetsS3BucketOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Comment:
          Fn::Sub: "${AWS::StackName} static assets CloudFront distribution (cookieless)"
        Enabled: true
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: AssetsS3BucketOrigin
          ViewerProtocolPolicy: "redirect-to-https"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: DomainCertificate
          SslSupportMethod: "sni-only"
  # DNS domain name for the host of the static asset files
  AssetsDNS:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneName:
        Fn::Sub: "${AssetsHostedZoneName}."
      Comment: "Domain for the CloudFront distribution of the static asset files"
      RecordSets:
        - Name:
            Fn::Sub: "${AssetsDomainName}."
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              Fn::GetAtt: AssetsCloudFrontDistribution.DomainName
  # DNS domain name for the S3 bucket that redirects from the APEX domain to the website
  # NOTE: This does not support HTTPS!
  RedirectDNS:
    Type: "AWS::Route53::RecordSet"
    # Only create if the website domain starts with `www.`
    Condition: SiteIsWwwDomain
    Properties:
      HostedZoneName:
        Fn::Sub: "${SiteHostedZoneName}."
      Comment: "Domain for the redirection website hosted as a S3 bucket"
      Type: A
      Name:
        Fn::Sub: "${SiteHostedZoneName}."
      AliasTarget:
        HostedZoneId:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - S3HostedZoneId
        DNSName:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - S3WebsiteEndpoint

  # Certificate for the domains
  DomainCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName:
        Ref: SiteDomainName
      DomainValidationOptions:
        # Send validation emails using the top-level domains
        - DomainName:
            Ref: SiteDomainName
          ValidationDomain:
            Ref: SiteHostedZoneName
        - DomainName:
            Ref: AssetsDomainName
          ValidationDomain:
            Ref: AssetsHostedZoneName
      SubjectAlternativeNames:
        - Ref: AssetsDomainName

  # The role that is used by the Lambda function execution
  LambdaExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::Region}-lambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*:*
          # Allow access to any SimpleDB domains related to this stack
          # NOTE: We assume that auto-generated domain names start with the stack name
          - Effect: Allow
            Action:
            - sdb:BatchDeleteAttributes
            - sdb:BatchPutAttributes
            - sdb:DeleteAttributes
            - sdb:DomainMetadata
            - sdb:GetAttributes
            - sdb:PutAttributes
            - sdb:Select
            Resource:
            - Fn::Sub: arn:aws:sdb:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}-*
          # Allow access to the user pool
          - Effect: Allow
            Action:
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:DeleteUser
            - cognito-idp:GetUser
            - cognito-idp:ListUsers
            - cognito-idp:UpdateUserAttributes
            Resource:
            # TODO: Could we restrict access to the particular userpool only?
            - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
      Path: "/"
      RoleName:
        Fn::Sub: "${AWS::StackName}-${AWS::Region}-lambdaRole"

  # Role for the API gateway for enabling CloudWatch logging
  ApiGatewayCloudWatchLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"

  # Accout for the API Gateway for enabling CloudWatch logging
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt: ["ApiGatewayCloudWatchLoggingRole", "Arn" ]
    DependsOn:
    - ApiGatewayCloudWatchLoggingRole

  # API gateway for server-side rendering
  SiteGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: "${AWS::StackName}-ssr"
      # Enable GZIP compression of the responses
      MinimumCompressionSize: 128

  # Deployment of the API gateway
  SiteGatewayDeployment<SiteDeploymentId>:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: SiteGatewayRestApi
    DependsOn:
    - SiteProxyPathGETApiGatewayMethod
    - SiteRootGETApiGatewayMethod

  # Stage for the API gateway
  SiteGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: SiteGatewayDeployment<SiteDeploymentId>
      Variables:
        # Make the API root URL available as a stage variable
        ApiRoot:
          Ref: ApiRoot
        # Make the API origin available as a stage variable
        ApiOrigin:
          Ref: ApiOrigin
        # Make the website root URL available as a stage variable
        SiteRoot:
          Ref: SiteRoot
        # Make the website origin available as a stage variable
        SiteOrigin:
          Ref: SiteOrigin
        # Make the AWS region available as a stage variable
        Region:
          Ref: AWS::Region
      MethodSettings:
      # Enables CloudWatch logging for the site rendering requests
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: SiteGatewayRestApi
      StageName: site

  # Custom domain name for the website
  SiteGatewayRestApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn:
        Ref: DomainCertificate
      DomainName:
        Ref: SiteDomainName

  # Removes the '/site' part from the URL path
  SiteGatewayRestApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ''
      DomainName:
        Ref: SiteGatewayRestApiDomainName
      RestApiId:
        Ref: SiteGatewayRestApi
      Stage:
        Ref: SiteGatewayStage

  # DNS domain name for the website
  SiteDNS:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneName:
        Fn::Sub: "${SiteHostedZoneName}."
      Comment: "Domain for the server-side rendering API Gateway deployment"
      RecordSets:
        - Name:
            Fn::Sub: "${SiteDomainName}."
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              Fn::GetAtt: SiteGatewayRestApiDomainName.DistributionDomainName

  # Lambda function
  SiteRenderViewLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: DeploymentManagementS3Bucket
        S3Key:
          Ref: SiteRequestLambdaFunctionS3Key
      FunctionName:
        Fn::Sub: "${AWS::StackName}-site-renderView"
      Handler: ssr.request
      MemorySize: 1024
      Role:
        Fn::GetAtt: ["LambdaExecutionIamRole", "Arn"]
      Runtime: nodejs10.x
      Timeout: 6
    DependsOn:
    - SiteRenderViewLambdaFunctionLogGroup
    - LambdaExecutionIamRole

  # Grant API Gateway REST API a permission to execute the Lambda function
  SiteRenderViewLambdaFunctionPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: ["SiteRenderViewLambdaFunction", "Arn"]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SiteGatewayRestApi}/*/*"

  # CloudWatch log group for the lambda function
  SiteRenderViewLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${AWS::StackName}-site-renderView"

  SiteProxyPathApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt: ['SiteGatewayRestApi', 'RootResourceId']
      PathPart: '{proxy+}'
      RestApiId:
        Ref: SiteGatewayRestApi

  # HTTP method for rendering the view at the root URL '/''
  SiteRootGETApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Fn::GetAtt: ['SiteGatewayRestApi', 'RootResourceId']
      RestApiId:
        Ref: SiteGatewayRestApi
      RequestParameters: {}
      AuthorizationType: NONE
      Integration:
        # NOTE: Lambda execution endpoint is always called with POST
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SiteRenderViewLambdaFunction.Arn}/invocations"
      MethodResponses: []

  # HTTP method for rendering the view at any other than the root URL
  SiteProxyPathGETApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: SiteProxyPathApiGatewayResource
      RestApiId:
        Ref: SiteGatewayRestApi
      RequestParameters: {}
      AuthorizationType: NONE
      Integration:
        # NOTE: Lambda execution endpoint is always called with POST
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SiteRenderViewLambdaFunction.Arn}/invocations"
      MethodResponses: []

Outputs:
  AssetsS3BucketName:
    Value:
      Ref: AssetsS3Bucket
  AssetsCloudFrontDistributionId:
    Value:
      Ref: AssetsCloudFrontDistribution
  SiteRenderViewLambdaFunctionLogGroupName:
    Description: "Log group name of SSR requests"
    Value:
      Ref: SiteRenderViewLambdaFunctionLogGroup
