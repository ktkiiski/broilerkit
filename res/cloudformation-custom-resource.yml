# Based on https://github.com/emdgroup/cfn-custom-resource
Resources:
  CustomResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt: CustomResourceRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk'), crypto = require('crypto'), https = require('https'), url = require('url');
          const pid = 'PhysicalResourceId', rp = 'ResourceProperties', pidq = 'PhysicalResourceIdQuery';
          exports.handler = (ev, ctx) => {
            let rand = random();
            ev[rp] = fixBooleans(ev[rp], ev.RequestType === 'Delete' ? ev[pid] : fixBooleans(ev[rp][pid], null, rand), rand);
            let args = ev[rp][ev.RequestType];
            if (!args) args = ev.RequestType === 'Delete' ? {} : ev[rp]['Create'];
            ['Attributes', pid, pidq, 'Parameters'].forEach(attr =>
              args[attr] = args[attr] || ev[rp][attr]
            );
            if (ev.RequestType === 'Delete') {
              updateResource(args, ev, ctx, function () {
                response.send(ev, ctx, response.SUCCESS, {}, ev[pid]);
              });
            } else if (ev.RequestType === 'Create' || ev.RequestType === 'Update') {
              updateResource(args, ev, ctx, function (data) {
                let props = ev[rp][ev.RequestType] || ev[rp]['Create'];
                if (props[pidq]) ev[pid] = data && data[props[pidq]];
                if (props[pid]) ev[pid] = props[pid];
                data = query(data, props.Attributes);
                response.send(ev, ctx, response.SUCCESS, data, ev[pid]);
              });
            }
          };

          function query(val, qr) {
            const path = qr ? qr.split('.') : [];
            while (val != null && path.length) {
              val = val[path.shift()];
            }
            return val;
          }

          function random() {
            return crypto.randomBytes(6).toString('base64').replace(/[+=/]/g, '').toUpperCase();
          }

          function fixBooleans(obj, id, rand) {
            if (Array.isArray(obj)) return obj.map(item => fixBooleans(item, id, rand));
            else if (typeof obj === 'object') {
              for (const key in obj) {
                obj[key] = fixBooleans(obj[key], id, rand);
              }
              return obj;
            } else if (typeof obj === 'string') {
              obj = obj === 'true' ? true : obj === 'false' ? false : obj === 'null' ? null : obj
                .replace(/\${Random}/, rand)
                .replace(/\${(true|false|null)}/g, '\1')
              ;
              if (typeof obj === 'string' && id) obj = obj.replace(/\${PhysicalId}/, id).replace(/\${PhysicalResourceId}/, id);
              return obj;
            } else return obj;
          }

          function b64ify(obj) {
            if (Buffer.isBuffer(obj))
              return obj.toString('base64');
            else if (Array.isArray(obj)) return obj.map(item => b64ify(item));
            else if (typeof obj === 'object') {
              for (const key in obj) {
                obj[key] = b64ify(obj[key]);
              }
              return obj;
            } else return obj;
          }

          function updateResource(args, ev, ctx, cb) {
            request(args, ev, function (err, data) {
              if (err && args.IgnoreErrors !== true) {
                response.send(ev, ctx, response.FAILED, err, ev[pid]);
              } else cb(data);
            });
          }

          function request(args, ev, cb) {
            const ac = args.Action;
            if (ev.RequestType === 'Delete' && !ac) return cb();
            let client = new AWS[ev[rp].Service]();
            if (ac === 'waitFor') client[ac](args.WaitState, args.Parameters, cb);
            else client[ac](args.Parameters, cb);
          }

          let response = {
            SUCCESS: 'SUCCESS',
            FAILED: 'FAILED',
            body: function (ev, ctx, responseStatus, responseData, pId) {
              let body = {
                Status: responseStatus,
                Reason: responseData instanceof Error ? responseData.toString() : '',
                [pid]: pId || ev.RequestId,
                StackId: ev.StackId,
                RequestId: ev.RequestId,
                LogicalResourceId: ev.LogicalResourceId,
                Data: responseStatus === response.FAILED ? null : b64ify(responseData),
              }
              if (JSON.stringify(body).length > 4096) {
                console.log('truncated responseData as it exceeded 4096 bytes');
                return Object.assign(body, {
                  Data: null
                });
              } else {
                return body;
              }
            },
            send: function (ev, ctx) {
              let responseBody = response.body.apply(this, arguments);
              console.log('Response', JSON.stringify(Object.assign({}, responseBody, {
                Data: null
              })));

              var parsed = url.parse(ev.ResponseURL);
              https.request({
                hostname: parsed.hostname,
                path: parsed.path,
                method: 'PUT',
              }, () => () => ctx.done()).on('error', function (error) {
                console.log(error);
                ctx.done();
              }).end(JSON.stringify(responseBody));
            },
          };
      FunctionName:
        Fn::Sub: "${AWS::StackName}-custom-resource"
      Runtime: nodejs12.x
      Timeout: 300  # = 5 minutes

  # Logging group for generic custom resource
  CustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName:
        Fn::Sub: "/aws/lambda/${CustomResourceLambdaFunction}"

  # Role for the custom resource
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Policy that allows custom resource Lambda function to alter AWS service resources
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CustomResourcePolicy
      Roles:
        - Ref: CustomResourceRole
      PolicyDocument:
        Version: '2012-10-17'
        # NOTE: The statement will be extended in other templates!
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              # Allow managing domain certificates
              - acm:DeleteCertificate
              - acm:DescribeCertificate
              - acm:GetCertificate
              - acm:RequestCertificate
